// por gadget
//called to create the proof of replication
//https://ethereum.stackexchange.com/questions/3542/how-are-ethereum-addresses-generated
//Ethereum public addresses: 512 bits
//--> ri 512 bits as well --> provided as array bits
//--> same for di: 512 bits --> provided as array of bits
//other leafs are already hashed: 256 bits --> how passed?: 2 fields each
//roots as well: 256 bits passed as 2 fields

//decrypt ri with public key (xorGadget): checks individual bits
//check equality of decryptedRi and di (equalityGadget): checks individual bits
//transform ri from field[512] into 4 fields
//calculate hash of ri: get 2 fields (with sha256packed)
//merkle proof for ri (merkleGadget): provide 2 fields each (for sha256packed)
//transform di from field[512] into 4 fields
//calculate hash of di: get 2 fields (with sha256packed)
//merkle proof for di (merkleGadget): provide 2 fields each (for sha256packed)

import "./merkleGadget.code" as merkleGadget
import "./xorGadget.code" as xorGadget
import "./equalityGadget.code" as equalityGadget
import "PACKING/pack128"
import "LIBSNARK/sha256packed"

//public inputs:
  //rRoot
  //dRoot
  //path (specifies specific leaf i)
  //address (public key prover)

//private inputs:
  //ri
  //rjVec
  //di
  //djVec

def main(field[2] rRoot, field[2] dRoot, field[10] pathToLeaf, field[512] addressProver, private field[512] ri, private field[20] rjVec, private field[512] di, private field[20] djVec) -> (field):
//decrypt ri with prover's address
  field[512] decryptedRi = xorGadget(ri, addressProver)

//creates equalityGadget for di and decryptedRi
  field equalityGiven = equalityGadget(di, decryptedRi)
  equalityGiven == 1

//transform ri from field[512] into 4 fields
  field ri0 = pack128(ri[0], ri[1], ri[2], ri[3], ri[4], ri[5], ri[6], ri[7], ri[8], ri[9], ri[10], ri[11], ri[12], ri[13], ri[14], ri[15], ri[16], ri[17], ri[18], ri[19], ri[20], ri[21], ri[22], ri[23], ri[24], ri[25], ri[26], ri[27], ri[28], ri[29], ri[30], ri[31], ri[32], ri[33], ri[34], ri[35], ri[36], ri[37], ri[38], ri[39], ri[40], ri[41], ri[42], ri[43], ri[44], ri[45], ri[46], ri[47], ri[48], ri[49], ri[50], ri[51], ri[52], ri[53], ri[54], ri[55], ri[56], ri[57], ri[58], ri[59], ri[60], ri[61], ri[62], ri[63], ri[64], ri[65], ri[66], ri[67], ri[68], ri[69], ri[70], ri[71], ri[72], ri[73], ri[74], ri[75], ri[76], ri[77], ri[78], ri[79], ri[80], ri[81], ri[82], ri[83], ri[84], ri[85], ri[86], ri[87], ri[88], ri[89], ri[90], ri[91], ri[92], ri[93], ri[94], ri[95], ri[96], ri[97], ri[98], ri[99], ri[100], ri[101], ri[102], ri[103], ri[104], ri[105], ri[106], ri[107], ri[108], ri[109], ri[110], ri[111], ri[112], ri[113], ri[114], ri[115], ri[116], ri[117], ri[118], ri[119], ri[120], ri[121], ri[122], ri[123], ri[124], ri[125], ri[126], ri[127])

  field ri1 = pack128(ri[128], ri[129], ri[130], ri[131], ri[132], ri[133], ri[134], ri[135], ri[136], ri[137], ri[138], ri[139], ri[140], ri[141], ri[142], ri[143], ri[144], ri[145], ri[146], ri[147], ri[148], ri[149], ri[150], ri[151], ri[152], ri[153], ri[154], ri[155], ri[156], ri[157], ri[158], ri[159], ri[160], ri[161], ri[162], ri[163], ri[164], ri[165], ri[166], ri[167], ri[168], ri[169], ri[170], ri[171], ri[172], ri[173], ri[174], ri[175], ri[176], ri[177], ri[178], ri[179], ri[180], ri[181], ri[182], ri[183], ri[184], ri[185], ri[186], ri[187], ri[188], ri[189], ri[190], ri[191], ri[192], ri[193], ri[194], ri[195], ri[196], ri[197], ri[198], ri[199], ri[200], ri[201], ri[202], ri[203], ri[204], ri[205], ri[206], ri[207], ri[208], ri[209], ri[210], ri[211], ri[212], ri[213], ri[214], ri[215], ri[216], ri[217], ri[218], ri[219], ri[220], ri[221], ri[222], ri[223], ri[224], ri[225], ri[226], ri[227], ri[228], ri[229], ri[230], ri[231], ri[232], ri[233], ri[234], ri[235], ri[236], ri[237], ri[238], ri[239], ri[240], ri[241], ri[242], ri[243], ri[244], ri[245], ri[246], ri[247], ri[248], ri[249], ri[250], ri[251], ri[252], ri[253], ri[254], ri[255])

  field ri2 = pack128(ri[256], ri[257], ri[258], ri[259], ri[260], ri[261], ri[262], ri[263], ri[264], ri[265], ri[266], ri[267], ri[268], ri[269], ri[270], ri[271], ri[272], ri[273], ri[274], ri[275], ri[276], ri[277], ri[278], ri[279], ri[280], ri[281], ri[282], ri[283], ri[284], ri[285], ri[286], ri[287], ri[288], ri[289], ri[290], ri[291], ri[292], ri[293], ri[294], ri[295], ri[296], ri[297], ri[298], ri[299], ri[300], ri[301], ri[302], ri[303], ri[304], ri[305], ri[306], ri[307], ri[308], ri[309], ri[310], ri[311], ri[312], ri[313], ri[314], ri[315], ri[316], ri[317], ri[318], ri[319], ri[320], ri[321], ri[322], ri[323], ri[324], ri[325], ri[326], ri[327], ri[328], ri[329], ri[330], ri[331], ri[332], ri[333], ri[334], ri[335], ri[336], ri[337], ri[338], ri[339], ri[340], ri[341], ri[342], ri[343], ri[344], ri[345], ri[346], ri[347], ri[348], ri[349], ri[350], ri[351], ri[352], ri[353], ri[354], ri[355], ri[356], ri[357], ri[358], ri[359], ri[360], ri[361], ri[362], ri[363], ri[364], ri[365], ri[366], ri[367], ri[368], ri[369], ri[370], ri[371], ri[372], ri[373], ri[374], ri[375], ri[376], ri[377], ri[378], ri[379], ri[380], ri[381], ri[382], ri[383])

  field ri3 = pack128(ri[384], ri[385], ri[386], ri[387], ri[388], ri[389], ri[390], ri[391], ri[392], ri[393], ri[394], ri[395], ri[396], ri[397], ri[398], ri[399], ri[400], ri[401], ri[402], ri[403], ri[404], ri[405], ri[406], ri[407], ri[408], ri[409], ri[410], ri[411], ri[412], ri[413], ri[414], ri[415], ri[416], ri[417], ri[418], ri[419], ri[420], ri[421], ri[422], ri[423], ri[424], ri[425], ri[426], ri[427], ri[428], ri[429], ri[430], ri[431], ri[432], ri[433], ri[434], ri[435], ri[436], ri[437], ri[438], ri[439], ri[440], ri[441], ri[442], ri[443], ri[444], ri[445], ri[446], ri[447], ri[448], ri[449], ri[450], ri[451], ri[452], ri[453], ri[454], ri[455], ri[456], ri[457], ri[458], ri[459], ri[460], ri[461], ri[462], ri[463], ri[464], ri[465], ri[466], ri[467], ri[468], ri[469], ri[470], ri[471], ri[472], ri[473], ri[474], ri[475], ri[476], ri[477], ri[478], ri[479], ri[480], ri[481], ri[482], ri[483], ri[484], ri[485], ri[486], ri[487], ri[488], ri[489], ri[490], ri[491], ri[492], ri[493], ri[494], ri[495], ri[496], ri[497], ri[498], ri[499], ri[500], ri[501], ri[502], ri[503], ri[504], ri[505], ri[506], ri[507], ri[508], ri[509], ri[510], ri[511])

//calculate hash of ri: get 2 fields (with sha256packed)
  riH0, riH1 = sha256packed(ri0, ri1, ri2, ri3)

//merkle proof for ri (merkleGadget): provide 2 fields each (for sha256packed)
  field[2] riArray = [0, 0]
  riArray[0] = riH0
  riArray[1] = riH1
  field merkleOutputRi = merkleGadget(riArray, pathToLeaf, rjVec, rRoot)
  merkleOutputRi == 1

//transform di from field[512] into 4 fields
  field di0 = pack128(di[0], di[1], di[2], di[3], di[4], di[5], di[6], di[7], di[8], di[9], di[10], di[11], di[12], di[13], di[14], di[15], di[16], di[17], di[18], di[19], di[20], di[21], di[22], di[23], di[24], di[25], di[26], di[27], di[28], di[29], di[30], di[31], di[32], di[33], di[34], di[35], di[36], di[37], di[38], di[39], di[40], di[41], di[42], di[43], di[44], di[45], di[46], di[47], di[48], di[49], di[50], di[51], di[52], di[53], di[54], di[55], di[56], di[57], di[58], di[59], di[60], di[61], di[62], di[63], di[64], di[65], di[66], di[67], di[68], di[69], di[70], di[71], di[72], di[73], di[74], di[75], di[76], di[77], di[78], di[79], di[80], di[81], di[82], di[83], di[84], di[85], di[86], di[87], di[88], di[89], di[90], di[91], di[92], di[93], di[94], di[95], di[96], di[97], di[98], di[99], di[100], di[101], di[102], di[103], di[104], di[105], di[106], di[107], di[108], di[109], di[110], di[111], di[112], di[113], di[114], di[115], di[116], di[117], di[118], di[119], di[120], di[121], di[122], di[123], di[124], di[125], di[126], di[127])

  field di1 = pack128(di[128], di[129], di[130], di[131], di[132], di[133], di[134], di[135], di[136], di[137], di[138], di[139], di[140], di[141], di[142], di[143], di[144], di[145], di[146], di[147], di[148], di[149], di[150], di[151], di[152], di[153], di[154], di[155], di[156], di[157], di[158], di[159], di[160], di[161], di[162], di[163], di[164], di[165], di[166], di[167], di[168], di[169], di[170], di[171], di[172], di[173], di[174], di[175], di[176], di[177], di[178], di[179], di[180], di[181], di[182], di[183], di[184], di[185], di[186], di[187], di[188], di[189], di[190], di[191], di[192], di[193], di[194], di[195], di[196], di[197], di[198], di[199], di[200], di[201], di[202], di[203], di[204], di[205], di[206], di[207], di[208], di[209], di[210], di[211], di[212], di[213], di[214], di[215], di[216], di[217], di[218], di[219], di[220], di[221], di[222], di[223], di[224], di[225], di[226], di[227], di[228], di[229], di[230], di[231], di[232], di[233], di[234], di[235], di[236], di[237], di[238], di[239], di[240], di[241], di[242], di[243], di[244], di[245], di[246], di[247], di[248], di[249], di[250], di[251], di[252], di[253], di[254], di[255])

  field di2 = pack128(di[256], di[257], di[258], di[259], di[260], di[261], di[262], di[263], di[264], di[265], di[266], di[267], di[268], di[269], di[270], di[271], di[272], di[273], di[274], di[275], di[276], di[277], di[278], di[279], di[280], di[281], di[282], di[283], di[284], di[285], di[286], di[287], di[288], di[289], di[290], di[291], di[292], di[293], di[294], di[295], di[296], di[297], di[298], di[299], di[300], di[301], di[302], di[303], di[304], di[305], di[306], di[307], di[308], di[309], di[310], di[311], di[312], di[313], di[314], di[315], di[316], di[317], di[318], di[319], di[320], di[321], di[322], di[323], di[324], di[325], di[326], di[327], di[328], di[329], di[330], di[331], di[332], di[333], di[334], di[335], di[336], di[337], di[338], di[339], di[340], di[341], di[342], di[343], di[344], di[345], di[346], di[347], di[348], di[349], di[350], di[351], di[352], di[353], di[354], di[355], di[356], di[357], di[358], di[359], di[360], di[361], di[362], di[363], di[364], di[365], di[366], di[367], di[368], di[369], di[370], di[371], di[372], di[373], di[374], di[375], di[376], di[377], di[378], di[379], di[380], di[381], di[382], di[383])

  field di3 = pack128(di[384], di[385], di[386], di[387], di[388], di[389], di[390], di[391], di[392], di[393], di[394], di[395], di[396], di[397], di[398], di[399], di[400], di[401], di[402], di[403], di[404], di[405], di[406], di[407], di[408], di[409], di[410], di[411], di[412], di[413], di[414], di[415], di[416], di[417], di[418], di[419], di[420], di[421], di[422], di[423], di[424], di[425], di[426], di[427], di[428], di[429], di[430], di[431], di[432], di[433], di[434], di[435], di[436], di[437], di[438], di[439], di[440], di[441], di[442], di[443], di[444], di[445], di[446], di[447], di[448], di[449], di[450], di[451], di[452], di[453], di[454], di[455], di[456], di[457], di[458], di[459], di[460], di[461], di[462], di[463], di[464], di[465], di[466], di[467], di[468], di[469], di[470], di[471], di[472], di[473], di[474], di[475], di[476], di[477], di[478], di[479], di[480], di[481], di[482], di[483], di[484], di[485], di[486], di[487], di[488], di[489], di[490], di[491], di[492], di[493], di[494], di[495], di[496], di[497], di[498], di[499], di[500], di[501], di[502], di[503], di[504], di[505], di[506], di[507], di[508], di[509], di[510], di[511])

//calculate hash of di: get 2 fields (with sha256packed)
  diH0, diH1 = sha256packed(di0, di1, di2, di3)

//merkle proof for di (merkleGadget): provide 2 fields each (for sha256packed)
  field[2] diArray = [0, 0]
  diArray[0] = diH0
  diArray[1] = diH1
  field merkleOutputDi = merkleGadget(diArray, pathToLeaf, djVec, dRoot)
  merkleOutputDi == 1

  return 1
  //compiles (4:20min): number of constraints: 337754
