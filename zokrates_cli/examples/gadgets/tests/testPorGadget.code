// por gadget
//called to create the proof of replication

import "../porGadget.code" as porGadget
import "../xorGadget.code" as xorGadget
import "../equalityGadget.code" as equalityGadget

def main() -> (field):
//public inputs:
  //r_root
  //d_root
  //path (specifies specific leaf i)
  //address (public key prover)

//private inputs:
  //ri
  //rj_vec
  //di
  //dj_vec

  //elements in rj_vec
  field[256] rj1 = []
  field[256] rj2 = []
  field[256] rj3 = []
  field[256] rj4 = []
  field[256] rj5 = []
  field[256] rj6 = []
  field[256] rj7 = []
  field[256] rj8 = []
  field[256] rj9 = []
  field[256] rj10 = []

  //elements in dj_vec
  field[256] dj1 = []
  field[256] dj2 = []
  field[256] dj3 = []
  field[256] dj4 = []
  field[256] dj5 = []
  field[256] dj6 = []
  field[256] dj7 = []
  field[256] dj8 = []
  field[256] dj9 = []
  field[256] dj10 = []

  field[256] r_root =
  field[256] d_root =
  field[10] pathToLeaf =
  field[256] addressProver =
  field[256] ri =
  field[10] rj_vec = [rj1, rj2, rj3, rj4, rj5, rj6, rj7, rj8, rj9, rj10]
  field[256] di =
  field[10] dj_vec = [dj1, dj2, dj3, dj4, dj5, dj6, dj7, dj8, dj9, dj10]


  field porOutput = porGadget(r_root, d_root, pathToLeaf, addressProver, ri, rj_vec, di, dj_vec)
  merkleOutputDi == 1

  return 1
