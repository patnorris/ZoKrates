// merkle gadget
//for tree of depth 1: root and two leaves
//in:
//  leaf: leaf in question, its presence in the Merkle tree will be proven (512 bits)
//  pathToLeaf: for now 1 bit, i.e. 1 means leaf is left leaf, 0 means leaf is right leaf
//  otherNodes: for now 1 node, the left or right node depending on position of leaf (256 bits)
//  root: root of the Merkle tree, computed root from leaves will be checked against this

import "./equalityGadget.code" as equalityGadget
import "./helpers/calculateRootForLeftLeaf512Bits.code" as calculateRootForLeftLeaf512Bits
import "./helpers/calculateRootForRightLeaf512Bits.code" as calculateRootForRightLeaf512Bits

def main(field[512] leafBits, field pathToLeaf, field[256] otherBits, field root) -> (field):
  //field[256] computedRoot = if pathToLeaf > 0 then calculateRootForLeftLeaf512Bits(leafBits, otherBits) else calculateRootForRightLeaf512Bits(otherBits, leafBits) fi
  field computedRoot = if pathToLeaf > 0 then calculateRootForLeftLeaf512Bits(leafBits, otherBits) else calculateRootForRightLeaf512Bits(otherBits, leafBits) fi

  field equalityGiven = equalityGadget(computedRoot, root)
  equalityGiven == 1

  return 1
