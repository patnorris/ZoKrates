// merkle gadget
//in:
//  leaf: leaf in question, its presence in the Merkle tree will be proven (512 bits)
//  pathToLeaf: for now 1 bit, i.e. 1 means leaf is left leaf, 0 means leaf is right leaf
//  otherNodes: for now 1 node, the left or right node depending on position of leaf (256 bits)
//  root: root of the Merkle tree, computed root from leaves will be checked against this

import "LIBSNARK/sha256packed"

def main(field[2] leafHash, field[10] pathToLeaf, field[20] otherHashes, field[2] root) -> (field):
  field computedRoot0 = leafHash[0]
  field computedRoot1 = leafHash[1]

  //for field i in 0..10 do //--> is killed after ca. 2 min
  //for field i in 0..3 do //--> is killed after ca. 4 min
  for field i in 0..2 do //--> compiled: Number of constraints: 331088
		field pathToTake =  pathToLeaf[i]

    //if pathToTake == 1: hash(leaf, next from otherHashes: i*2, i*2+1)
    //else if pathToTake == 0: hash(next from otherHashes: i*2, i*2+1, leaf)
    //else (pathToTake != 0|1): current hash is computedRoot

    field otherHash0 = otherHashes[i*2]
    field otherHash1 = otherHashes[i*2 + 1]

    leftHash0, leftHash1 = sha256packed(computedRoot0, computedRoot1, otherHash0, otherHash1)
    rightHash0, rightHash1 = sha256packed(otherHash0, otherHash1, computedRoot0, computedRoot1)

    computedRoot0 = if pathToTake == 1 then leftHash0 else computedRoot0 fi
    computedRoot1 = if pathToTake == 1 then leftHash1 else computedRoot1 fi

    computedRoot0 = if pathToTake == 0 then rightHash0 else computedRoot0 fi
    computedRoot1 = if pathToTake == 0 then rightHash1 else computedRoot1 fi

	endfor

  computedRoot0 == root[0]
  computedRoot1 == root[1]

  return 1
