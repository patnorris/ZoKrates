libsnark.rs:
witness functions (31, 48) transform all inputs into one vector of 32 bytes elements (flattened), pass beginning of vector to C-witness-functionss

wraplibsnarkgadgets.cpp:
inputs for merkleRead witness; leaf node (256), tree_depth bits (16), tree_depth other nodes (16 * 256), root (256) --> in total: 4624

undefined reference to:
https://github.com/rust-lang/rust-bindgen/issues/1046
https://github.com/rust-lang/rust/issues/47493
https://github.com/rust-lang/rust/issues/53916
https://flames-of-code.netlify.com/blog/rust-and-cmake-cplusplus/
https://github.com/xd009642/tarpaulin/issues/23
https://github.com/rust-lang/rust/issues/35061
https://github.com/rust-lang/rust/pull/48076
https://github.com/rust-ndarray/ndarray/issues/251
https://users.rust-lang.org/t/linking-with-cc-failed-while-running-an-example/17896

caused by use of templates?
--> find definition of HashT in libsnark
HashT:

merkle tree check read gadget
hashers.emplace_back(HashT(pb, 2*digest_size, inp, (i == 0 ? *computed_root : internal_output[i-1]),
                                   FMT(this->annotation_prefix, " load_hashers_%zu", i)));

merkle tree check update gadget
prev_hashers.emplace_back(HashT(pb, 2*digest_size, prev_inp, (i == 0 ? prev_root_digest : prev_internal_output[i-1]),
                                                                  FMT(this->annotation_prefix, " prev_hashers_%zu", i)));

set commitment gadget
hash_element.reset(new HashT(pb, element_bits.size(), *element_block, root_digest, FMT(annotation_prefix, " hash_element")));

ram compliance predicate
typedef ram_base_field<ramT> FieldT;
typedef CRH_with_bit_out_gadget<FieldT> HashT;


CRH_with_bit_out_gadget:

crh gadget
using CRH_with_bit_out_gadget = knapsack_CRH_with_bit_out_gadget<FieldT>;


ramT:

test_fooram.cpp
typedef ram_zksnark_machine_pp<ppT> ramT;


ram_zksnark_machine_pp:

run_ram_zksnark.hpp
bool run_ram_zksnark(const ram_example<ram_zksnark_machine_pp<ram_zksnark_ppT> > &example,
                     const bool test_serialization);

ram_zksnark_params.hpp (#include <libsnark/zk_proof_systems/zksnark/ram_zksnark/ram_zksnark_params.hpp>)
using ram_zksnark_machine_pp = typename ram_zksnark_ppT::machine_pp;

test_ram_zksnark.cpp
#include <sstream>

#include <libsnark/common/default_types/ram_zksnark_pp.hpp>
#include <libsnark/relations/ram_computations/rams/examples/ram_examples.hpp>
#include <libsnark/relations/ram_computations/rams/tinyram/tinyram_params.hpp>
#include <libsnark/zk_proof_systems/zksnark/ram_zksnark/examples/run_ram_zksnark.hpp>
template<typename ppT>
...{
typedef ram_zksnark_machine_pp<ppT> ramT;

ppT:
libff/libff/algebra/curves/public_params.hpp ???? https://github.com/scipr-lab/libff/blob/master/libff/algebra/curves/public_params.hpp


--> add to file here
#include <libff/common/utils.hpp>

#include <libsnark/common/default_types/r1cs_ppzkpcd_pp.hpp>
#include <libsnark/common/default_types/r1cs_ppzksnark_pp.hpp>
#include <libsnark/relations/ram_computations/rams/fooram/fooram_params.hpp>
#include <libsnark/zk_proof_systems/ppzksnark/ram_ppzksnark/examples/run_ram_ppzksnark.hpp>
#include <libsnark/zk_proof_systems/zksnark/ram_zksnark/examples/run_ram_zksnark.hpp>
template<typename ppT>

#include <numeric>

#include <libsnark/gadgetlib1/gadgets/delegated_ra_memory/memory_load_gadget.hpp>
#include <libsnark/gadgetlib1/gadgets/delegated_ra_memory/memory_load_store_gadget.hpp>
#include <libsnark/relations/ram_computations/memory/delegated_ra_memory.hpp>
#include <libsnark/relations/ram_computations/rams/ram_params.hpp>
#include <libsnark/zk_proof_systems/pcd/r1cs_pcd/compliance_predicate/compliance_predicate.hpp>
#include <libsnark/zk_proof_systems/pcd/r1cs_pcd/compliance_predicate/cp_handler.hpp>
